@page "/pedidos"
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JS

<div class="mb-3">
    <NavLink class="btn btn-secondary me-2" href="/">Volver al Home</NavLink>
</div>

<h3>Gestión de Pedidos</h3>

<div class="mb-3">
    <button class="btn btn-warning me-2" @onclick="CargarPedidos">Actualizaciones de Pedidos</button>
    <NavLink class="btn btn-warning me-2" href="/pedidos/agregar">Agregar pedidos</NavLink>
</div>

@if (pedidos is null)
{
    <p>No hay pedidos cargados.</p>
}
else if (!pedidos.Any())
{
    <p>No se encontraron pedidos.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Número Pedido</th>
                <th>Cliente</th>
                <th>Email</th>
                <th>Estado</th>
                <th>Fecha</th>
                <th>Total</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in pedidos)
            {
                <tr>
                    <td>@p.NumeroPedido</td>
                    <td>@p.NombreCliente</td>
                    <td>@p.EmailCliente</td>
                    <td>
                        @if (pedidoEnEdicion == p.NumeroPedido)
                        {
                            <select class="form-select form-select-sm" @bind="estadoTemporal">
                                <option value="Pendiente">Pendiente</option>
                                <option value="Cancelado">Cancelado</option>
                                <option value="Completado">Completado</option>
                            </select>
                        }
                        else
                        {
                            @p.Estado
                        }
                    </td>
                    <td>@p.Fecha.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@p.Total</td>
                    <td>
                        @if (pedidoEnEdicion == p.NumeroPedido)
                        {
                            <button class="btn btn-success btn-sm me-2" @onclick="() => GuardarEstado(p)">Guardar</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelarEdicion">Cancelar</button>
                        }
                        else
                        {
                            <button class="btn btn-primary btn-sm me-2" @onclick="() => ModificarCabecera(p)">
                                Modificar Cabecera
                            </button>

                            @if (p.Estado.Equals("Pendiente", StringComparison.OrdinalIgnoreCase))
                            {
                                <button class="btn btn-secondary btn-sm me-2" @onclick="() => MostrarDetalles(p.NumeroPedido)">
                                    Mostrar Detalles
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-secondary btn-sm me-2" disabled style="opacity:0.6; cursor:not-allowed;">
                                    Mostrar Detalles
                                </button>
                            }

                            <button class="btn btn-danger btn-sm me-2" @onclick="() => ConfirmarEliminarCabecera(p.NumeroPedido)">
                                Eliminar Cabecera
                            </button>

                            <div class="mt-2">
                                <input type="number" class="form-control form-control-sm" min="1"
                                       placeholder="N° detalle"
                                       @bind="numeroDetalleEliminarPorPedido[p.NumeroPedido]" />
                                <button class="btn btn-outline-danger btn-sm mt-1"
                                        @onclick="() => ConfirmarEliminarDetalle(p.NumeroPedido)">
                                    Eliminar Detalle
                                </button>
                            </div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormularioDetalle && detallePedido.Any())
{
    <h4>Detalles del pedido @numeroPedidoSeleccionado</h4>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>N° Detalle</th>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio Unitario</th>
                <th>Subtotal</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var d in detallePedido)
            {
                <tr>
                    <td>@d.NumeroDetalle</td>
                    <td>@d.Producto</td>
                    <td>
                        <input type="number" class="form-control" min="1"
                               @bind="d.Cantidad" @bind:event="oninput"
                               @onchange="(_) => RecalcularSubtotal(d)" />
                    </td>
                    <td>@d.PrecioUnitario.ToString("0.00")</td>  
                    <td>@d.Subtotal.ToString("0.00")</td>      
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-success me-2" @onclick="GuardarCambiosDetalle">Guardar cambios</button>
}

@code {
    private List<PedidoCabecera> pedidos = new();
    private List<DetallePedido> detallePedido = new();
    private bool mostrarFormularioDetalle = false;
    private string numeroPedidoSeleccionado = string.Empty;

    // 🔧 nuevo: número de detalle separado por pedido
    private Dictionary<string, int> numeroDetalleEliminarPorPedido = new();

    private string pedidoEnEdicion = string.Empty;
    private string estadoTemporal = string.Empty;

    // --- Cargar pedidos ---
    private async Task CargarPedidos()
    {
        try
        {
            pedidos = await Http.GetFromJsonAsync<List<PedidoCabecera>>("pedidos/cabeceras") ?? new();
            // Inicializar los campos de detalle
            numeroDetalleEliminarPorPedido = pedidos.ToDictionary(p => p.NumeroPedido, p => 0);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar pedidos: {ex.Message}, la api no esta en funcionamiento");
        }
    }

    // --- Modificar cabecera ---
    private void ModificarCabecera(PedidoCabecera pedido)
    {
        pedidoEnEdicion = pedido.NumeroPedido;
        estadoTemporal = pedido.Estado;
    }

    private void CancelarEdicion() => pedidoEnEdicion = string.Empty;

    private async Task GuardarEstado(PedidoCabecera pedido)
    {
        try
        {
            var body = new { estado = estadoTemporal };

            var response = await Http.PutAsJsonAsync($"pedidos/cabeceras/{pedido.NumeroPedido}", body);
            if (response.IsSuccessStatusCode)
            {
                pedido.Estado = estadoTemporal;
                pedidoEnEdicion = string.Empty;
                await JS.InvokeVoidAsync("alert", "Estado actualizado correctamente.");
                await CargarPedidos();
            }
            else
            {
                var msg = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Error al actualizar estado: {msg}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}, la API no esta en funcionamiento");
        }
    }

    // --- Mostrar detalles ---
    private async Task MostrarDetalles(string numeroPedido)
    {
        numeroPedidoSeleccionado = numeroPedido;
        mostrarFormularioDetalle = true;

        try
        {
            detallePedido = await Http.GetFromJsonAsync<List<DetallePedido>>($"pedidos/{numeroPedido}/detalles") ?? new();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al obtener detalles: {ex.Message}, la API no esta en funcionamiento");
        }
    }

    // --- Recalcular subtotal ---
    private async void RecalcularSubtotal(DetallePedido d)
    {
        if (d.Cantidad < 1)
        {
            d.Cantidad = 1;
            await JS.InvokeVoidAsync("alert", "La cantidad mínima es 1.");
        }
        else if (d.Cantidad > 1000)
        {
            d.Cantidad = 1000;
            await JS.InvokeVoidAsync("alert", "La cantidad máxima es 1000.");
        }

        d.Subtotal = d.Cantidad * d.PrecioUnitario;
    }

    // --- Guardar cambios de detalle ---
    private async Task GuardarCambiosDetalle()
    {
        try
        {
            foreach (var d in detallePedido)
            {
                if (d.Cantidad < 1)
                    d.Cantidad = 1;

                var dto = new { cantidad = d.Cantidad, precioUnitario = d.PrecioUnitario };
                await Http.PutAsJsonAsync($"pedidos/{numeroPedidoSeleccionado}/detalles/{d.NumeroDetalle}", dto);
            }

            var totalActualizado = detallePedido.Sum(x => x.Subtotal);

            var pedido = pedidos.FirstOrDefault(p => p.NumeroPedido == numeroPedidoSeleccionado);
            if (pedido != null)
                pedido.Total = totalActualizado;

            await JS.InvokeVoidAsync("alert", "Cambios guardados correctamente.");
            await MostrarDetalles(numeroPedidoSeleccionado);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al guardar cambios: {ex.Message}, la API no esta en funcionamiento");
        }
    }

    // --- Eliminar cabecera ---
    private async Task ConfirmarEliminarCabecera(string numeroPedido)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar la cabecera {numeroPedido}?"))
        {
            await EliminarCabecera(numeroPedido);
        }
    }

    private async Task EliminarCabecera(string numeroPedido)
    {
        try
        {
            var response = await Http.DeleteAsync($"pedidos/cabeceras/{numeroPedido}");
            if (response.IsSuccessStatusCode)
            {
                pedidos.RemoveAll(p => p.NumeroPedido == numeroPedido);
                detallePedido.Clear();
                mostrarFormularioDetalle = false;
                await JS.InvokeVoidAsync("alert", "Cabecera eliminada correctamente.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al eliminar cabecera: {ex.Message}, la API no esta en funcionamiento");
        }
    }

    // --- Eliminar detalle ---
    private async Task ConfirmarEliminarDetalle(string numeroPedido)
    {
        if (!numeroDetalleEliminarPorPedido.TryGetValue(numeroPedido, out var numeroDetalle) || numeroDetalle <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Ingrese un número de detalle válido.");
            return;
        }

        if (!detallePedido.Any(d => d.NumeroDetalle == numeroDetalle))
        {
            await JS.InvokeVoidAsync("alert", $"El detalle {numeroDetalle} no existe en este pedido.");
            return;
        }

        if (await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar el detalle {numeroDetalle}?"))
        {
            await EliminarDetalle(numeroPedido, numeroDetalle);
            StateHasChanged();
        }
    }

    private async Task EliminarDetalle(string numeroPedido, int numeroDetalle)
    {
        try
        {
            var response = await Http.DeleteAsync($"pedidos/{numeroPedido}/detalles/{numeroDetalle}");
            if (response.IsSuccessStatusCode)
            {
                detallePedido.RemoveAll(d => d.NumeroDetalle == numeroDetalle);
                await CargarPedidos();
                await MostrarDetalles(numeroPedido);
                await JS.InvokeVoidAsync("alert", "Detalle eliminado correctamente.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al eliminar detalle: {ex.Message}, la API no esta en funcionamiento");
        }
    }

    // --- Clases ---
    public class PedidoCabecera
    {
        public string NumeroPedido { get; set; } = string.Empty;
        public string NombreCliente { get; set; } = string.Empty;
        public string EmailCliente { get; set; } = string.Empty;
        public string Estado { get; set; } = string.Empty;
        public DateTime Fecha { get; set; }
        public decimal Total { get; set; }
    }

    public class DetallePedido
    {
        public int NumeroDetalle { get; set; }
        public string Producto { get; set; } = string.Empty;
        public int Cantidad { get; set; }
        public decimal PrecioUnitario { get; set; }
        public decimal Subtotal { get; set; }
    }
}
