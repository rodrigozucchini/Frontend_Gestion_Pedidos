@page "/pedidos"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.JSInterop

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="mb-3">
    <button class="btn btn-secondary me-2" @onclick="VolverHome">Volver al Home</button>
    <button class="btn btn-primary me-2" @onclick="MostrarAlta">Alta de Pedido</button>
    <button class="btn btn-warning" @onclick="MostrarBajaModificacion">Baja/Modificación</button>
</div>

<h3>Gestión de Pedidos</h3>

@* ========== SECCIÓN: ALTA DE PEDIDO ========== *@
@if (modoActual == Modo.Alta)
{
    <div class="card p-4 mb-4">
        <h4 class="mb-3">Nuevo Pedido</h4>

        @* Autocomplete Cliente *@
        <div class="mb-3">
            <label class="form-label">Email del Cliente:</label>
            <input type="text"
                   class="form-control"
                   @bind="busquedaCliente"
                   @oninput="OnClienteSearch"
                   placeholder="Escriba para buscar cliente por email..."
                   autocomplete="off" />

            @if (clientesSugeridos.Any() && mostrarSugerenciasCliente)
            {
                <div class="list-group mt-1" style="position: absolute; z-index: 1000; max-height: 200px; overflow-y: auto;">
                    @foreach (var cliente in clientesSugeridos)
                    {
                        <button type="button"
                                class="list-group-item list-group-item-action"
                                @onclick="() => SeleccionarCliente(cliente)">
                            <strong>@cliente.Email</strong><br />
                            <small>@cliente.Nombre</small>
                        </button>
                    }
                </div>
            }

            @if (!string.IsNullOrEmpty(clienteSeleccionado?.Email))
            {
                <div class="alert alert-info mt-2">
                    <strong>Cliente seleccionado:</strong> @clienteSeleccionado.Nombre (@clienteSeleccionado.Email)
                </div>
            }
        </div>

        @* Autocomplete Producto *@
        <div class="mb-3">
            <label class="form-label">Buscar Producto:</label>
            <div class="input-group">
                <input type="text"
                       class="form-control"
                       @bind="busquedaProducto"
                       @oninput="OnProductoSearch"
                       placeholder="Escriba para buscar producto..."
                       autocomplete="off" />
                <button class="btn btn-outline-secondary" @onclick="LimpiarBusquedaProducto">Limpiar</button>
            </div>

            @if (productosSugeridos.Any() && mostrarSugerenciasProducto)
            {
                <div class="list-group mt-1" style="position: absolute; z-index: 1000; max-height: 250px; overflow-y: auto; width: 60%;">
                    @foreach (var producto in productosSugeridos)
                    {
                        <button type="button"
                                class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                                @onclick="() => AgregarProductoAGrilla(producto)">
                            <div>
                                <strong>@producto.Nombre</strong><br />
                                <small class="text-muted">Precio: $@producto.Precio.ToString("N2")</small>
                            </div>
                            <span class="badge bg-primary">Agregar</span>
                        </button>
                    }
                </div>
            }
        </div>

        @* Grilla de Detalles *@
        <div class="mb-3">
            <h5>Productos del Pedido</h5>
            @if (!detallesPedido.Any())
            {
                <div class="alert alert-warning">No hay productos agregados. Busque y seleccione productos arriba.</div>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Producto</th>
                            <th>Precio Unit.</th>
                            <th style="width: 150px;">Cantidad</th>
                            <th>Subtotal</th>
                            <th style="width: 100px;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in detallesPedido)
                        {
                            <tr>
                                <td>@detalle.NombreProducto</td>
                                <td>$@detalle.PrecioUnitario.ToString("N2")</td>
                                <td>
                                    <input type="number"
                                           class="form-control"
                                           min="1"
                                           max="1000"
                                           @bind="detalle.Cantidad"
                                           @oninput="(e) => ActualizarCantidad(detalle, e)" />
                                </td>
                                <td><strong>$@detalle.Subtotal.ToString("N2")</strong></td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarDetalle(detalle)">
                                        <i class="bi bi-trash"></i> Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="3" class="text-end"><strong>TOTAL:</strong></td>
                            <td colspan="2"><strong>$@CalcularTotal().ToString("N2")</strong></td>
                        </tr>
                    </tfoot>
                </table>
            }
        </div>

        <div class="d-flex gap-2">
            <button class="btn btn-success" @onclick="GuardarPedido" disabled="@(!PuedeGuardar())">
                Crear Pedido
            </button>
            <button class="btn btn-secondary" @onclick="CancelarAlta">Cancelar</button>
        </div>
    </div>
}

@* ========== SECCIÓN: BAJA/MODIFICACIÓN ========== *@
@if (modoActual == Modo.BajaModificacion)
{
    <div class="card p-4 mb-4">
        <h4 class="mb-3">Lista de Pedidos</h4>

        <button class="btn btn-info mb-3" @onclick="CargarPedidos">Cargar Pedidos</button>

        @if (pedidos == null)
        {
            <p>No se han cargado pedidos todavía.</p>
        }
        else if (!pedidos.Any())
        {
            <div class="alert alert-info">No hay pedidos registrados.</div>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Nro. Pedido</th>
                        <th>Cliente</th>
                        <th>Email</th>
                        <th>Fecha</th>
                        <th>Estado</th>
                        <th>Total</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pedido in pedidos)
                    {
                        <tr>
                            <td>@pedido.NumeroPedido</td>
                            <td>@pedido.NombreCliente</td>
                            <td>@pedido.EmailCliente</td>
                            <td>@pedido.Fecha.ToString("dd/MM/yyyy")</td>
                            <td>
                                <span class="badge bg-@ObtenerColorEstado(pedido.Estado)">
                                    @pedido.Estado
                                </span>
                            </td>
                            <td>$@pedido.Total.ToString("N2")</td>
                            <td>
                                <button class="btn btn-info btn-sm me-1" @onclick="() => VerDetalles(pedido.NumeroPedido)">
                                    Ver Detalles
                                </button>
                                <button class="btn btn-warning btn-sm me-1" @onclick="() => EditarPedido(pedido.NumeroPedido)">
                                    Editar
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => CancelarPedido(pedido.NumeroPedido)">
                                    Cancelar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}

@* ========== MODAL: EDITAR PEDIDO ========== *@
@if (pedidoEnEdicion != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Pedido @pedidoEnEdicion.NumeroPedido</h5>
                    <button type="button" class="btn-close" @onclick="CerrarEdicion"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <strong>Cliente:</strong> @pedidoEnEdicion.NombreCliente (@pedidoEnEdicion.EmailCliente)
                    </div>
                    <div class="mb-3">
                        <strong>Fecha:</strong> @pedidoEnEdicion.Fecha.ToString("dd/MM/yyyy")
                    </div>

                    @* Cambiar Estado *@
                    <div class="mb-3">
                        <label class="form-label">Estado del Pedido:</label>
                        <select class="form-select" @bind="estadoSeleccionado">
                            <option value="Pendiente">Pendiente</option>
                            <option value="Completado">Completado</option>
                            <option value="Cancelado">Cancelado</option>
                        </select>
                    </div>

                    @* Agregar nuevo producto *@
                    <div class="mb-3">
                        <label class="form-label">Agregar Producto:</label>
                        <input type="text"
                               class="form-control"
                               @bind="busquedaProductoEdicion"
                               @oninput="OnProductoSearchEdicion"
                               placeholder="Escriba para buscar producto..."
                               autocomplete="off" />

                        @if (productosSugeridosEdicion.Any() && mostrarSugerenciasProductoEdicion)
                        {
                            <div class="list-group mt-1" style="max-height: 200px; overflow-y: auto;">
                                @foreach (var producto in productosSugeridosEdicion)
                                {
                                    <button type="button"
                                            class="list-group-item list-group-item-action"
                                            @onclick="() => AgregarProductoAPedido(producto)">
                                        <strong>@producto.Nombre</strong> - $@producto.Precio.ToString("N2")
                                    </button>
                                }
                            </div>
                        }
                    </div>

                    @* Detalles del Pedido *@
                    <h5>Productos del Pedido</h5>
                    @if (detallesPedidoEdicion.Any())
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Producto</th>
                                    <th>Precio Unit.</th>
                                    <th style="width: 150px;">Cantidad</th>
                                    <th>Subtotal</th>
                                    <th style="width: 100px;">Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detalle in detallesPedidoEdicion)
                                {
                                    <tr>
                                        <td>@detalle.Producto</td>
                                        <td>$@detalle.PrecioUnitario.ToString("N2")</td>
                                        <td>
                                            <input type="number"
                                                   class="form-control"
                                                   min="1"
                                                   max="1000"
                                                   value="@detalle.Cantidad"
                                                   @onchange="(e) => ActualizarCantidadDetalle(detalle, e)" />
                                        </td>
                                        <td>$@detalle.Subtotal.ToString("N2")</td>
                                        <td>
                                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarDetalleDelPedido(detalle)">
                                                Eliminar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>TOTAL:</strong></td>
                                    <td colspan="2"><strong>$@detallesPedidoEdicion.Sum(d => d.Subtotal).ToString("N2")</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-success" @onclick="GuardarCambiosPedido">Guardar Cambios</button>
                    <button class="btn btn-secondary" @onclick="CerrarEdicion">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // ===== ENUMS Y CLASES =====
    private enum Modo { Ninguno, Alta, BajaModificacion }

    private class Cliente
    {
        public string Email { get; set; }
        public string Nombre { get; set; }
    }

    private class Producto
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public decimal Precio { get; set; }
    }

    private class DetallePedidoTemp
    {
        public int ProductoId { get; set; }
        public string NombreProducto { get; set; }
        public decimal PrecioUnitario { get; set; }
        public int Cantidad { get; set; }
        public decimal Subtotal => PrecioUnitario * Cantidad;
    }

    private class PedidoCabecera
    {
        public string NumeroPedido { get; set; }
        public string NombreCliente { get; set; }
        public string EmailCliente { get; set; }
        public DateTime Fecha { get; set; }
        public string Estado { get; set; }
        public decimal Total { get; set; }
    }

    private class PedidoDetalle
    {
        public int numeroDetalle { get; set; }
        public string Producto { get; set; }
        public int Cantidad { get; set; }
        public decimal PrecioUnitario { get; set; }
        public decimal Subtotal { get; set; }
    }

    // ===== VARIABLES DE ESTADO =====
    private Modo modoActual = Modo.Ninguno;

    // Alta de Pedido
    private string busquedaCliente = string.Empty;
    private string busquedaProducto = string.Empty;
    private bool mostrarSugerenciasCliente = false;
    private bool mostrarSugerenciasProducto = false;

    private List<Cliente> clientesSugeridos = new();
    private List<Producto> productosSugeridos = new();
    private Cliente? clienteSeleccionado = null;
    private List<DetallePedidoTemp> detallesPedido = new();

    // Baja/Modificación
    private List<PedidoCabecera>? pedidos = null;
    private PedidoCabecera? pedidoEnEdicion = null;
    private List<PedidoDetalle> detallesPedidoEdicion = new();
    private string estadoSeleccionado = "Pendiente";
    private string busquedaProductoEdicion = string.Empty;
    private List<Producto> productosSugeridosEdicion = new();
    private bool mostrarSugerenciasProductoEdicion = false;

    // ===== DATOS DE EJEMPLO (TEMPORAL) =====
    private List<Cliente> clientesDisponibles = new()
    {
        new Cliente { Email = "juan@example.com", Nombre = "Juan Pérez" },
        new Cliente { Email = "maria@example.com", Nombre = "María García" },
        new Cliente { Email = "carlos@example.com", Nombre = "Carlos López" },
        new Cliente { Email = "ana@example.com", Nombre = "Ana Martínez" },
        new Cliente { Email = "pedro@example.com", Nombre = "Pedro Rodríguez" }
    };

    private List<Producto> productosDisponibles = new()
    {
        new Producto { Id = 1, Nombre = "LAPTOP DELL XPS 15", Precio = 1200.50m },
        new Producto { Id = 2, Nombre = "MOUSE LOGITECH MX MASTER", Precio = 89.99m },
        new Producto { Id = 3, Nombre = "TECLADO MECÁNICO RGB", Precio = 150.00m },
        new Producto { Id = 4, Nombre = "MONITOR SAMSUNG 27\"", Precio = 350.00m },
        new Producto { Id = 5, Nombre = "AURICULARES SONY WH-1000XM4", Precio = 299.99m },
        new Producto { Id = 6, Nombre = "WEBCAM LOGITECH C920", Precio = 79.99m },
        new Producto { Id = 7, Nombre = "SSD SAMSUNG 1TB", Precio = 120.00m }
    };

    // ===== NAVEGACIÓN =====
    private void VolverHome()
    {
        Navigation.NavigateTo("/");
    }

    private void MostrarAlta()
    {
        modoActual = Modo.Alta;
        LimpiarFormularioAlta();
    }

    private void MostrarBajaModificacion()
    {
        modoActual = Modo.BajaModificacion;
    }

    // ===== ALTA DE PEDIDO =====
    private void OnClienteSearch(ChangeEventArgs e)
    {
        busquedaCliente = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(busquedaCliente))
        {
            clientesSugeridos.Clear();
            mostrarSugerenciasCliente = false;
            return;
        }

        clientesSugeridos = clientesDisponibles
            .Where(c => c.Email.Contains(busquedaCliente, StringComparison.OrdinalIgnoreCase) ||
                       c.Nombre.Contains(busquedaCliente, StringComparison.OrdinalIgnoreCase))
            .Take(5)
            .ToList();

        mostrarSugerenciasCliente = clientesSugeridos.Any();
    }

    private void SeleccionarCliente(Cliente cliente)
    {
        clienteSeleccionado = cliente;
        busquedaCliente = cliente.Email;
        mostrarSugerenciasCliente = false;
    }

    private void OnProductoSearch(ChangeEventArgs e)
    {
        busquedaProducto = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(busquedaProducto))
        {
            productosSugeridos.Clear();
            mostrarSugerenciasProducto = false;
            return;
        }

        productosSugeridos = productosDisponibles
            .Where(p => p.Nombre.Contains(busquedaProducto, StringComparison.OrdinalIgnoreCase))
            .Take(10)
            .ToList();

        mostrarSugerenciasProducto = productosSugeridos.Any();
    }

    private void LimpiarBusquedaProducto()
    {
        busquedaProducto = string.Empty;
        productosSugeridos.Clear();
        mostrarSugerenciasProducto = false;
    }

    private void AgregarProductoAGrilla(Producto producto)
    {
        var existente = detallesPedido.FirstOrDefault(d => d.ProductoId == producto.Id);

        if (existente != null)
        {
            existente.Cantidad++;
        }
        else
        {
            detallesPedido.Add(new DetallePedidoTemp
            {
                ProductoId = producto.Id,
                NombreProducto = producto.Nombre,
                PrecioUnitario = producto.Precio,
                Cantidad = 1
            });
        }

        LimpiarBusquedaProducto();
    }

    private void ActualizarCantidad(DetallePedidoTemp detalle, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int cantidad))
        {
            detalle.Cantidad = Math.Clamp(cantidad, 1, 1000);
        }
    }

    private void EliminarDetalle(DetallePedidoTemp detalle)
    {
        detallesPedido.Remove(detalle);
    }

    private decimal CalcularTotal()
    {
        return detallesPedido.Sum(d => d.Subtotal);
    }

    private bool PuedeGuardar()
    {
        return clienteSeleccionado != null && detallesPedido.Any();
    }

    private async Task GuardarPedido()
    {
        if (!PuedeGuardar()) return;

        var pedidoDto = new
        {
            EmailCliente = clienteSeleccionado!.Email,
            Detalles = detallesPedido.Select(d => new
            {
                ProductoId = d.ProductoId,
                Cantidad = d.Cantidad
            }).ToList()
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/Pedidos/create", pedidoDto);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Pedido creado exitosamente!");
                LimpiarFormularioAlta();
                modoActual = Modo.Ninguno;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Error al crear pedido: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void CancelarAlta()
    {
        LimpiarFormularioAlta();
        modoActual = Modo.Ninguno;
    }

    private void LimpiarFormularioAlta()
    {
        busquedaCliente = string.Empty;
        busquedaProducto = string.Empty;
        clienteSeleccionado = null;
        detallesPedido.Clear();
        clientesSugeridos.Clear();
        productosSugeridos.Clear();
        mostrarSugerenciasCliente = false;
        mostrarSugerenciasProducto = false;
    }

    // ===== BAJA/MODIFICACIÓN =====
    private async Task CargarPedidos()
    {
        try
        {
            pedidos = await Http.GetFromJsonAsync<List<PedidoCabecera>>("api/Pedidos/cabeceras");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar pedidos: {ex.Message}");
        }
    }

    private string ObtenerColorEstado(string estado)
    {
        return estado switch
        {
            "Pendiente" => "warning",
            "Completado" => "success",
            "Cancelado" => "danger",
            _ => "secondary"
        };
    }

    private async Task VerDetalles(string numeroPedido)
    {
        try
        {
            var detalles = await Http.GetFromJsonAsync<List<PedidoDetalle>>($"api/Pedidos/{numeroPedido}/detalles");
            var mensaje = $"Detalles del Pedido {numeroPedido}:\n\n";
            foreach (var d in detalles!)
            {
                mensaje += $"- {d.Producto}: {d.Cantidad} x ${d.PrecioUnitario} = ${d.Subtotal}\n";
            }
            await JS.InvokeVoidAsync("alert", mensaje);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task EditarPedido(string numeroPedido)
    {
        try
        {
            pedidoEnEdicion = await Http.GetFromJsonAsync<PedidoCabecera>($"api/Pedidos/cabeceras/{numeroPedido}");
            detallesPedidoEdicion = await Http.GetFromJsonAsync<List<PedidoDetalle>>($"api/Pedidos/{numeroPedido}/detalles") ?? new();
            estadoSeleccionado = pedidoEnEdicion!.Estado;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void OnProductoSearchEdicion(ChangeEventArgs e)
    {
        busquedaProductoEdicion = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(busquedaProductoEdicion))
        {
            productosSugeridosEdicion.Clear();
            mostrarSugerenciasProductoEdicion = false;
            return;
        }

        productosSugeridosEdicion = productosDisponibles
            .Where(p => p.Nombre.Contains(busquedaProductoEdicion, StringComparison.OrdinalIgnoreCase))
            .Take(10)
            .ToList();

        mostrarSugerenciasProductoEdicion = productosSugeridosEdicion.Any();
    }

    private async Task AgregarProductoAPedido(Producto producto)
    {
        try
        {
            var detalleDto = new
            {
                ProductoId = producto.Id,
                Cantidad = 1
            };

            var response = await Http.PostAsJsonAsync($"api/Pedidos/{pedidoEnEdicion!.NumeroPedido}/detalles/create", detalleDto);

            if (response.IsSuccessStatusCode)
            {
                await EditarPedido(pedidoEnEdicion.NumeroPedido);
                busquedaProductoEdicion = string.Empty;
                mostrarSugerenciasProductoEdicion = false;
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task ActualizarCantidadDetalle(PedidoDetalle detalle, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int cantidad))
        {
            cantidad = Math.Clamp(cantidad, 1, 1000);

            try
            {
                var updateDto = new { Cantidad = cantidad };
                await Http.PutAsJsonAsync($"api/Pedidos/{pedidoEnEdicion!.NumeroPedido}/detalles/{detalle.numeroDetalle}", updateDto);
                detalle.Cantidad = cantidad;
                detalle.Subtotal = detalle.PrecioUnitario * cantidad;
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            }
        }
    }

    private async Task EliminarDetalleDelPedido(PedidoDetalle detalle)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"¿Eliminar {detalle.Producto}?");
        if (!confirm) return;

        try
        {
            await Http.DeleteAsync($"api/Pedidos/{pedidoEnEdicion!.NumeroPedido}/detalles/{detalle.numeroDetalle}");
            detallesPedidoEdicion.Remove(detalle);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task GuardarCambiosPedido()
    {
        try
        {
            var updateDto = new { Estado = estadoSeleccionado };
            await Http.PutAsJsonAsync($"api/Pedidos/cabeceras/{pedidoEnEdicion!.NumeroPedido}", updateDto);

            await JS.InvokeVoidAsync("alert", "Cambios guardados exitosamente!");
            await CargarPedidos();
            CerrarEdicion();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void CerrarEdicion()
    {
        pedidoEnEdicion = null;
        detallesPedidoEdicion.Clear();
        busquedaProductoEdicion = string.Empty;
        productosSugeridosEdicion.Clear();
        mostrarSugerenciasProductoEdicion = false;
    }

    private async Task CancelarPedido(string numeroPedido)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"¿Está seguro de cancelar el pedido {numeroPedido}?");
        if (!confirm) return;

        try
        {
            await Http.DeleteAsync($"api/Pedidos/cabeceras/{numeroPedido}");
            await JS.InvokeVoidAsync("alert", "Pedido cancelado exitosamente!");
            await CargarPedidos();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
}