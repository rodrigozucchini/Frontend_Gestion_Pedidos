@page "/pedidos"
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JS

<div class="mb-3">
    <NavLink class="btn btn-secondary me-2" href="/">Volver al Home</NavLink>
</div>

<h3>Gestión de Pedidos</h3>

<div class="mb-3">
    <button class="btn btn-warning me-2" @onclick="CargarPedidos">Baja/Modificación</button>
</div>

@if (pedidos is null)
{
    <p>No hay pedidos cargados.</p>
}
else if (!pedidos.Any())
{
    <p>No se encontraron pedidos.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Número Pedido</th>
                <th>Cliente</th>
                <th>Email</th>
                <th>Estado</th>
                <th>Fecha</th>
                <th>Total</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in pedidos)
            {
                <tr>
                    <td>@p.NumeroPedido</td>
                    <td>@p.NombreCliente</td>
                    <td>@p.EmailCliente</td>
                    <td>@p.Estado</td>
                    <td>@p.Fecha.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@p.Total</td>
                    <td>
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => ModificarCabecera(p.NumeroPedido)">Modificar Cabecera</button>
                        <button class="btn btn-secondary btn-sm me-2" @onclick="() => MostrarDetalles(p.NumeroPedido)">Mostrar Detalles</button>
                        <button class="btn btn-danger btn-sm me-2" @onclick="() => ConfirmarEliminarCabecera(p.NumeroPedido)">Eliminar Cabecera</button>

                        <div class="mt-2">
                            <input type="number" class="form-control form-control-sm" placeholder="N° detalle" @bind="numeroDetalleEliminar" />
                            <button class="btn btn-outline-danger btn-sm mt-1" @onclick="() => ConfirmarEliminarDetalle(p.NumeroPedido)">Eliminar Detalle</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormularioDetalle && detallePedido.Any())
{
    <h4>Detalles del pedido @numeroPedidoSeleccionado</h4>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio Unitario</th>
                <th>Subtotal</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var d in detallePedido)
            {
                <tr>
                    <td>@d.Producto</td>
                    <td>
                        <input type="number" class="form-control" min="1" @bind="d.Cantidad" @bind:event="oninput" @onchange="(_) => RecalcularSubtotal(d)" />
                    </td>
                    <td>@d.PrecioUnitario</td>
                    <td>@d.Subtotal</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<PedidoCabecera> pedidos = new();
    private List<DetallePedido> detallePedido = new();
    private bool mostrarFormularioDetalle = false;
    private string numeroPedidoSeleccionado = string.Empty;
    private int numeroDetalleEliminar;

    private async Task CargarPedidos()
    {
        try
        {
            pedidos = await Http.GetFromJsonAsync<List<PedidoCabecera>>("pedidos/cabeceras") ?? new();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar pedidos: {ex.Message}");
        }
    }

    private void ModificarCabecera(string numeroPedido)
    {
        numeroPedidoSeleccionado = numeroPedido;
        // aquí puedes abrir tu formulario de modificar estado si lo tienes
    }

    private async Task MostrarDetalles(string numeroPedido)
    {
        numeroPedidoSeleccionado = numeroPedido;
        mostrarFormularioDetalle = true;

        try
        {
            detallePedido = await Http.GetFromJsonAsync<List<DetallePedido>>($"pedidos/{numeroPedido}/detalles") ?? new();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al obtener detalles: {ex.Message}");
        }
    }

    private void RecalcularSubtotal(DetallePedido d)
    {
        d.Subtotal = d.Cantidad * d.PrecioUnitario;
    }

    // --- Confirmación y eliminación de cabecera ---
    private async Task ConfirmarEliminarCabecera(string numeroPedido)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar la cabecera {numeroPedido}?"))
        {
            await EliminarCabecera(numeroPedido);
        }
    }

    private async Task EliminarCabecera(string numeroPedido)
    {
        try
        {
            var response = await Http.DeleteAsync($"pedidos/{numeroPedido}");
            if (response.IsSuccessStatusCode)
            {
                pedidos.RemoveAll(p => p.NumeroPedido == numeroPedido);
                detallePedido.Clear();
                mostrarFormularioDetalle = false;
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al eliminar cabecera: {ex.Message}");
        }
    }

    // --- Confirmación y eliminación de detalle ---
    private async Task ConfirmarEliminarDetalle(string numeroPedido)
    {
        if (numeroDetalleEliminar <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Ingrese un número de detalle válido.");
            return;
        }

        if (await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar el detalle {numeroDetalleEliminar}?"))
        {
            await EliminarDetalle(numeroPedido, numeroDetalleEliminar);
        }
    }

    private async Task EliminarDetalle(string numeroPedido, int numeroDetalle)
    {
        try
        {
            var response = await Http.DeleteAsync($"pedidos/{numeroPedido}/detalles/{numeroDetalle}");
            if (response.IsSuccessStatusCode)
            {
                detallePedido.RemoveAll(d => d.NumeroDetalle == numeroDetalle);
                await MostrarDetalles(numeroPedido); // refresca los detalles
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al eliminar detalle: {ex.Message}");
        }
    }

    public class PedidoCabecera
    {
        public string NumeroPedido { get; set; } = string.Empty;
        public string NombreCliente { get; set; } = string.Empty;
        public string EmailCliente { get; set; } = string.Empty;
        public string Estado { get; set; } = string.Empty;
        public DateTime Fecha { get; set; }
        public decimal Total { get; set; }
    }

    public class DetallePedido
    {
        public int NumeroDetalle { get; set; }
        public string Producto { get; set; } = string.Empty;
        public int Cantidad { get; set; }
        public decimal PrecioUnitario { get; set; }
        public decimal Subtotal { get; set; }
    }
}
