@page "/clientes"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.JSInterop
@using System.Text.RegularExpressions

@inject HttpClient Http
@inject IJSRuntime JS

<div class="mb-3">
    <NavLink class="btn btn-secondary me-2" href="/">Volver al Home</NavLink>
</div>

<h3>Clientes</h3>

<div class="mb-3">
    <button class="btn btn-primary me-2" @onclick="CargarTodos">Traer Todos</button>
</div>

<div class="mb-3">
    <input class="form-control" placeholder="Ingrese término de búsqueda" @bind="terminoBusqueda" />
</div>

<div class="mb-3">
    <button class="btn btn-success me-2" @onclick="BuscarPorNombre">Buscar por Nombre</button>
    <button class="btn btn-info me-2" @onclick="BuscarPorEmail">Buscar por Email</button>
</div>

<button class="btn btn-primary mb-3" @onclick="NuevoCliente">Nuevo Cliente</button>

@if (errorMensaje != null)
{
    <div class="alert alert-danger">@errorMensaje</div>
}
else if (clientes == null)
{
    <p>No hay clientes cargados.</p>
}
else if (clientes.Value.GetArrayLength() == 0)
{
    <p>No se encontraron clientes.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Email</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in clientes.Value.EnumerateArray())
            {
                var email = c.GetProperty("email").GetString()!;
                <tr>
                    <td>@c.GetProperty("nombre").GetString()</td>
                    <td>@email</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarCliente(c)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarCliente(email)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="card p-3 mb-3">
        <h5>@(editarEmail != null ? "Editar Cliente" : "Nuevo Cliente")</h5>
        <div class="mb-2">
            <label>Nombre:</label>
            <input class="form-control text-uppercase"
                   @bind="Nombre"
                   maxlength="50"
                   @oninput="OnNombreChanged" />
        </div>
        <div class="mb-2">
            <label>Email:</label>
            <input class="form-control text-uppercase"
                   type="email"
                   @bind="Email"
                   maxlength="50"
                   @oninput="OnEmailChanged" />
        </div>
        <button class="btn btn-success me-2" @onclick="GuardarCliente">Guardar</button>
        <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </div>
}

@code {
    private JsonElement? clientes;
    private bool mostrarFormulario = false;
    private string? editarEmail = null;
    private string nombre = string.Empty;
    private string email = string.Empty;
    private string terminoBusqueda = string.Empty;
    private string? errorMensaje = null;

    // --- Propiedades con validaciones ---
    public string Nombre
    {
        get => nombre;
        set
        {
            if (string.IsNullOrWhiteSpace(value)) { nombre = string.Empty; return; }
            var limpio = Regex.Replace(value.Trim(), @"\s+", " ").ToUpperInvariant();
            nombre = limpio.Length > 50 ? limpio[..50] : limpio;
        }
    }

    public string Email
    {
        get => email;
        set
        {
            if (string.IsNullOrWhiteSpace(value)) { email = string.Empty; return; }
            var limpio = value.Trim().ToUpperInvariant();
            email = limpio.Length > 50 ? limpio[..50] : limpio;
        }
    }

    private void OnNombreChanged(ChangeEventArgs e) =>
        Nombre = e.Value?.ToString()?.ToUpperInvariant() ?? string.Empty;

    private void OnEmailChanged(ChangeEventArgs e) =>
        Email = e.Value?.ToString()?.ToUpperInvariant() ?? string.Empty;

    // --- Formulario ---
    private void NuevoCliente()
    {
        mostrarFormulario = true;
        editarEmail = null;
        Nombre = string.Empty;
        Email = string.Empty;
    }

    private void EditarCliente(JsonElement c)
    {
        mostrarFormulario = true;
        editarEmail = c.GetProperty("email").GetString();
        Nombre = c.GetProperty("nombre").GetString() ?? string.Empty;
        Email = editarEmail!;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
        editarEmail = null;
        Nombre = string.Empty;
        Email = string.Empty;
    }

    // --- Guardar Cliente ---
    private async Task GuardarCliente()
    {
        if (string.IsNullOrWhiteSpace(Nombre) || string.IsNullOrWhiteSpace(Email))
        {
            await JS.InvokeVoidAsync("alert", "Debe completar todos los campos.");
            return;
        }

        if (!Regex.IsMatch(Email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
        {
            await JS.InvokeVoidAsync("alert", "El email ingresado no es válido.");
            return;
        }

        try
        {
            var cliente = new { nombre = Nombre, email = Email };

            HttpResponseMessage response;
            if (editarEmail != null)
                response = await Http.PutAsJsonAsync($"clientes/by-email/{editarEmail}", cliente);
            else
                response = await Http.PostAsJsonAsync("clientes/create", cliente);

            if (!response.IsSuccessStatusCode)
            {
                var msg = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Error al guardar cliente: {msg}");
                return;
            }

            mostrarFormulario = false;
            await CargarTodos();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al conectar con la API: {ex.Message}, es posible que la API no este en funcionamiento");
        }
    }

    // --- Eliminar Cliente ---
    private async Task EliminarCliente(string email)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "¿Desea eliminar este cliente?");
        if (!confirm) return;

        try
        {
            var response = await Http.DeleteAsync($"clientes/by-email/{email}");
            if (!response.IsSuccessStatusCode)
            {
                var msg = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Error al eliminar cliente: {msg}");
            }
            else
            {
                await CargarTodos();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al conectar con la API: {ex.Message}, es posible que la API no este en funcionamiento");
        }
    }

    // --- Cargar todos ---
    private async Task CargarTodos()
    {
        try
        {
            var response = await Http.GetAsync("clientes/search");

            if (!response.IsSuccessStatusCode)
            {
                errorMensaje = $"No se pudo cargar la lista de clientes (HTTP {response.StatusCode}).";
                clientes = JsonDocument.Parse("[]").RootElement;
                return;
            }

            using var stream = await response.Content.ReadAsStreamAsync();
            var doc = await JsonDocument.ParseAsync(stream);
            clientes = doc.RootElement;
            errorMensaje = null;
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al conectarse con la API: {ex.Message}, es posible que la API no este en funcionamiento";
            clientes = JsonDocument.Parse("[]").RootElement;
        }
    }

    // --- Buscar por nombre/email ---
    private async Task BuscarPorNombre() => await BuscarPor("nombre");
    private async Task BuscarPorEmail() => await BuscarPor("email");

    private async Task BuscarPor(string tipo)
    {
        if (string.IsNullOrWhiteSpace(terminoBusqueda))
        {
            await JS.InvokeVoidAsync("alert", "Ingrese un término de búsqueda.");
            return;
        }

        try
        {
            string url = tipo switch
            {
                "nombre" => $"clientes/search-name/{terminoBusqueda}",
                "email" => $"clientes/search-email/{terminoBusqueda}",
                _ => "clientes/search"
            };

            var response = await Http.GetAsync(url);
            if (!response.IsSuccessStatusCode)
            {
                errorMensaje = $"Error al buscar clientes ({response.StatusCode}).";
                clientes = JsonDocument.Parse("[]").RootElement;
                return;
            }

            using var stream = await response.Content.ReadAsStreamAsync();
            var doc = await JsonDocument.ParseAsync(stream);

            if (tipo == "email" && doc.RootElement.ValueKind == JsonValueKind.Object)
            {
                var arrayDoc = JsonDocument.Parse($"[{doc.RootElement.GetRawText()}]");
                clientes = arrayDoc.RootElement;
            }
            else
            {
                clientes = doc.RootElement;
            }

            errorMensaje = null;
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al buscar: {ex.Message}, es posible que la API no este en funcionamiento";
            clientes = JsonDocument.Parse("[]").RootElement;
        }
    }
}
